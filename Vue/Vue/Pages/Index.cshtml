@page
@using Vue.Pages
@model Vue.Pages.IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="row">
    <img src="~/images/Img2.png" />
    <h1>Что такое vue.js?</h1>
    <div>Vue (произносится /vjuː/, примерно как view) — это прогрессивный фреймворк для создания пользовательских интерфейсов. В отличие от фреймворков-монолитов, Vue создан пригодным для постепенного внедрения. Его ядро в первую очередь решает задачи уровня представления (view), что упрощает интеграцию с другими библиотеками и существующими проектами. С другой стороны, Vue полностью подходит и для создания сложных одностраничных приложений (SPA, Single-Page Applications), если использовать его совместно с современными инструментами и дополнительными библиотеками.</div>
    <h1>Описание фреймворка</h1>
    <img src="~/images/img1.jpeg" />
    <div>
        Vue.js — это JavaScript библиотека для создания веб-интерфейсов с использованием шаблона архитектуры MVVM (Model-View-ViewModel).<br><br>
        Поскольку Vue работает только на «уровне представления» и не используется для промежуточного программного обеспечения и бэкэнда, он может легко интегрироваться с другими проектами и библиотеками. Vue.js содержит широкую функциональность для уровня представлений и может использоваться для создания мощных одностраничных веб-приложений.<br><br>
        Функции Vue.js:<br><br>
        <ul>
            <li>Реактивные интерфейсы;</li>
            <li>Декларативный рендеринг;</li>
            <li>Связывание данных;</li>
            <li>Директивы (все директивы имеют префикс «V-». В директиву передается значение состояния, а в качестве аргументов используются html атрибуты или Vue JS события);</li>
            <li>Логика шаблонов;</li>
            <li>Компоненты;</li>
            <li>Обработка событий;</li>
            <li>Свойства;</li>
            <li>Переходы и анимация CSS;</li>
            <li>Фильтры.</li>
        </ul>
        <h1>Где применяется Vue.js</h1>
        <div>
            Vue подходит для небольших проектов, которым необходимо добавить немного реактивности, представить форму с помощью AJAX, отобразить значения при вводе данных пользователем, авторизация или другие аналогичные задачи. Vue легко масштабируется и хорошо подходит для объемных проектов, поэтому его называют прогрессивным фреймворком.<br><br>
            Vue также отлично подходит для крупных одностраничных приложений благодаря своим основным компонентам, таким как Router и Vuex. С Vue можно как использовать общедоступные API для создания приложений, так и реализовывать выполняемые сервером приложения. Но Vue лучше всего подходит для разработки решений, которые используют внешние API для обработки данных.<br><br>
            С помощью Vue также можно создавать frontend блога на популярных CMS. Vue.js отлично подходит и для разработки динамических интерфейсов, которые адаптируются под пользователя.<br><br>
        </div>
        <h1>Примеры использования и основы vue.js?</h1>
        <div>
            <script async src="//jsfiddle.net/w7zoqj1v/embed/js,html,result/dark/"></script>
            <h3>Подключаем Vue.js на страницу</h3>
            <div>
                Можно получить последнюю версию Vue.js с Github.com. Мы сделаем проще и подключим Vue через скрипт.
            </div>
            <h3>Создание View-Model</h3>
            <div>
                В Vue.js View-Model'и создаются с помощью класса Vue. Вы можете думать о View-Model'ях как об объектах, которые упрощают отображение данных вашей модели в представлении (вы можете соотнести любой объект в качестве модели и любой HTML элемент в качестве представления).<br><br>
                Как вы могли увидеть выше, свойство el указывает на представление (вы можете использовать здесь любой CSS селектор), а свойство data указывает на объект модели. Наша View-Model готова к использованию.<br><br>
                Для отображения данных модели внутри представления, нужно использовать специальные токены заключённые в фигурные скобки. Например, чтобы отобразить свойство age, нужно добавить токен {{age}} внутри представления.<br><br>
                Любые изменения в модели, моментально отобразятся  в представлении.<br><br>
            </div>
            <h3>Создание двусторонней связи</h3>
            <div>
                Токены в виде фигурных скобок, которые мы использовали в предыдущем примере это один из способов связывания данных. Они позволяют отображать данные модели, но не изменять их. Если вы хотите разрешить представлению изменять данные, то нужно реализовать двустороннюю связь, использую директиву v-model.
            </div>
            <h3>Фильтры</h3>
            <div>
                Фильтр - это функция, которую вы можете использовать в своих токенах. Перед фильтром всегда ставится символ pipe ( вертикальная черта | ).<br><br>
                Ниже пример фильтра в действии:
            </div>
            <script async src="//jsfiddle.net/w7zoqj1v/1/embed/js,html,result/dark/"></script>
            <h3>Рендеринг массивов</h3>
            <div>
                Если в свойствах вашей модели есть массивы, то вы можете вывести их содержимое используя директиву v-for, добавив её например к элементу < li> списка.
                Для того чтобы изменить порядок вывода элементов в списке, используйте фильтр orderBy внутри директивы v-for.
                Так же вы можете указать условия вывода элементов. Для этого используйте фильтр filterBy.
                А вот пример того как можно с помощью filterBy сделать простой поиск:<br><br>
            </div>
            <script async src="//jsfiddle.net/w7zoqj1v/2/embed/js,html,result/dark/"></script>
            <h3>Обработка событий</h3>
            <div>
                В Vue.js, если вам нужно обрабатывать события связанные с вашим представлением, вам нужно добавить обработчики событий внутри свойства methods вашей View-Model. Внутри всех обработчиков событий Vue.js, вы можете использовать ключевое слово this, для доступа к данным вашей модели.
                Для того чтобы связать обработчик события, который определён во View-Model, с одним или несколькими элементами пользовательского интерфейса в представлении, нужно использовать директиву v-on.
            </div>
            <script async src="//jsfiddle.net/w7zoqj1v/3/embed/js,html,result/dark/"></script>
        </div>
        <h1>Заключение</h1>
        <div>
            В данном докладе о Vue.js, мы рассмотрели как использовать одностороннюю и двустороннюю связи данных, директивы, фильтры и события. Также мы узнали, как создавать свои собственные HTML элементы, используя компоненты Vue.js.
            Темы раскрыты достаточно, чтобы начать создавать интерактивные веб-интерфейсы, используя такую простую структуру.
        </div>
    </div>
</div>